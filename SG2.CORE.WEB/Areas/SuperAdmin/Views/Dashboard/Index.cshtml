@model SG2.CORE.MODAL.ViewModals.Backend.DashBoard.DashboardViewModel
@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Areas/SuperAdmin/Views/Shared/_LayoutNew.cshtml";
    var BaseURl = ViewBag.BaseUrl;
}

<div class="main">
    <div class="container">
        <div class="row">
            <div class="col-xs-12">
                <h2>Dashboard</h2>
            </div>
        </div>
    </div>
</div>



<div class="form-wrap">
    <div class="container">
        <div class="information-form-inner">
            <div class="row">

                <div class="col-xs-12">

                    @*@foreach (var item in Model.dashboardListingModel.OrderBy(x=>x.JVBoxId))
                        {

                            <div class="col-md-3">
                                @item.BoxName
                            </div>
                            <div class="col-md-3">


                                    <label class="form-radio">
                                        Running
                                        @Html.RadioButtonFor(model => item.ServerRunningStatusId, "1",new  { @Name = item.JVBoxId,MP_Id=item.JVBoxId,@class="MPServerrunning"})
                                        <span class="checkmark"></span>
                                    </label>
                                    <label class="form-radio">
                                        Stopped
                                        @Html.RadioButtonFor(model => item.ServerRunningStatusId, "2", new { @Name  = item.JVBoxId, MP_Id = item.JVBoxId, @class = "MPServerrunning" })
                                        <span class="checkmark"></span>
                                    </label>
                                </div>


                        }*@



                </div>

            </div>
            <div class="row">

                <div class="col-md-12 col-sm-12 reportsDiv">
                    <h3> Most Popular Product</h3>
                    <br />
                    <div id="MostPopularProductPiChart" style="width:100%; height:400px; align-content:center;"></div>
                </div>
            </div>
            <div class="row  reportsDiv">
                <div class="col-md-12 col-sm-12">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">New Sign Ups, Cancellations & Paid Plan counts</h4>

                        </div>
                        <div class="card-content collapse show">
                            <div class="card-body">

                                <div id="profileActions" class="height-400"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 col-sm-12">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Soft Blocks, Hard Blocks & Password Compromises</h4>

                        </div>
                        <div class="card-content collapse show">
                            <div class="card-body">

                                <div id="actionsRpt" class="height-400"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            <h3 class="panel-title">Notifications</h3>

                            <span class="pull-right clickable panel-collapsed">
                                <i class="glyphicon glyphicon-chevron-down"></i>
                            </span>
                            <span class="pull-right btn_refreshJVSection" data-id="botmngr">
                                <i class="glyphicon glyphicon-refresh"></i>
                            </span>

                            @*<span class="pull-right">Read | <b id="totalR"></b></span>
                                <span class="pull-right">UnRead | <b id="totalUR"></b></span>*@
                        </div>

                        <div class="panel-body">
                            <table class="table table-bordered table-striped table-hover table-condensed">
                                <thead>
                                    <tr>
                                        <th scope="col">Date</th>

                                        <th scope="col">Notification</th>
                                        <th scope="col">Social Username</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody style="max-height:10px;min-height: 10px;overflow-y: scroll;" id="TR_JVCustomersHTM" class="TR_JVCustomersHTM"></tbody>
                            </table>
                        </div>

                    </div>
                </div>
            </div>

            <!-- Html just for entering data -->
            <table class="hidden mgr_innerHTML">
                <tr>
                    <td>{{Date}}</td>

                    <td>{{Notification}}</td>
                    <td>{{SocialUserName}}</td>
                    <td>{{Status}}</td>
                    <td>
                        <a title="Read" href="#" class="btn_NotificationRead" data-id="{{Id}}"><i class="fa fa-eye"></i></a>
                        <a title="Close" href="#" class="btn_NotificationClose" data-id="{{Id}}"><i class="fa fa-trash"></i></a>

                    </td>
                </tr>
            </table>

            <hr />



        </div>
    </div>
</div>

@section scripts{

    <script src="~/Scripts/ECharts/echarts.js"></script>
    <script src="~/Scripts/ECharts/echarts-all.js"></script>
    <script src="~/Scripts/ECharts/chart/bar.js"></script>
    <script src="~/Scripts/ECharts/chart/line.js"></script>
    <script src="~/Scripts/ECharts/chart/chord.js"></script>
    <script src="~/Scripts/ECharts/chart/eventRiver.js"></script>
    <script src="~/Scripts/ECharts/chart/force.js"></script>
    <script src="~/Scripts/ECharts/chart/funnel.js"></script>
    <script src="~/Scripts/ECharts/chart/gauge.js"></script>
    <script src="~/Scripts/ECharts/chart/k.js"></script>
    <script src="~/Scripts/ECharts/chart/map.js"></script>
    <script src="~/Scripts/ECharts/chart/pie.js"></script>
    <script src="~/Scripts/ECharts/chart/radar.js"></script>
    <script src="~/Scripts/ECharts/chart/scatter.js"></script>
    <script src="~/Scripts/ECharts/chart/tree.js"></script>
    <script src="~/Scripts/ECharts/chart/treemap.js"></script>
    <script src="~/Scripts/ECharts/chart/venn.js"></script>
    <script src="~/Scripts/ECharts/chart/wordCloud.js"></script>
    <script src="~/Scripts/ECharts/chart/echarts-all-english-v2.js"></script>
    <script type="text/javascript">

        $("document").ready(function () {

            $(document).on('click', '.panel-heading span.clickable', function (e) {
                var $this = $(this);
                if (!$this.hasClass('panel-collapsed')) {
                    $this.parents('.panel').find('.panel-body').slideUp();
                    $this.addClass('panel-collapsed');
                    $this.find('i').removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');
                } else {
                    $this.parents('.panel').find('.panel-body').slideDown();
                    $this.removeClass('panel-collapsed');
                    $this.find('i').removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up');
                }
            })


            setInterval(function () {
                LoadNotificationData();
            }, 60 * 1000);

            $(".btn_refreshJVSection").on("click", function (e) {

                LoadNotificationData();
            })

            $(".MPServerrunning").on("change", function (e) {

                var JvBoxid = $(this).attr("MP-Id");
              var RValue=  $(this).val();

                $.ajax({

                    url: GLB_BASEURL + "/Dashboard/JVBoxSetServerRunningStatus",
                    type: "Get",
                    data: { jvboxid: JvBoxid, serverrunningstatusId: RValue },
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (Data) {


                    },
                    error: function () {
                        alert("An error has occured!!!");
                    }
                });

            })

            LoadNotificationData();
            function LoadNotificationData() {
                var NotificationHtml = "#TR_JVCustomersHTM";
                var glb_TR_JVCustomersHTML = $(".mgr_innerHTML tbody").html();
                $(NotificationHtml).html("");
                var url = GLB_BASEURL + "/Dashboard/GetNotificationData/" + 1;
                $(NotificationHtml).html('<tr><td colspan="5" class="loadingSpinner"><i class="fa fa-refresh fa-spin spiner"></i></td></tr>');
                $.ajax({
                    url: url,
                    global: false,
                    type: 'get',
                    contentType: "application/json",
                    async: true,
                    success: function (result) {
                        if (!$.isEmptyObject(result)) {
                            if (result.Data.ResultType == "Success") {
                                $(NotificationHtml).html("");
                                $.each(result.Data.ResultData, function (i, obj) {
                                    var tr = glb_TR_JVCustomersHTML
                                        .replace("{{Date}}", getFormatedDateTime(obj.CreatedOn))
                                        .replace("{{Mode}}", obj.Mode)
                                        .replace("{{Notification}}", obj.Notification)
                                        .replace("{{SocialUserName}}", obj.SocialUsername)
                                        .replace("{{Status}}", obj.StatusName)
                                        .replace("{{Id}}", obj.Id)
                                        .replace("{{Id}}", obj.Id)
                                    $(NotificationHtml).append(tr);
                                    //$('#totalE-' + jvServer).text(obj.TotalError)
                                    //$('#totalIP-' + jvServer).text(obj.TotalInProgress)
                                    //$('#totalP-' + jvServer).text(obj.TotalPending)

                                });

                                BindNotificationClickEvent();
                            }
                            else {
                                $(NotificationHtml).html("");
                            }
                        }
                    },
                    error: function () {
                        $(NotificationHtml).html("");
                    }
                });
            }


            function BindNotificationClickEvent() {
                $(".btn_NotificationRead").unbind();
                $(".btn_NotificationRead").bind("click", NotificationRead);

                $(".btn_NotificationClose").unbind();
                $(".btn_NotificationClose").bind("click", NotificationClose);
            }

            function NotificationRead(e) {
                e.preventDefault();
                e.stopPropagation();

                var id = $(this).attr("data-id");

                $.ajax({

                    url: GLB_BASEURL + "/Dashboard/ReadNotification",
                    type: "Get",
                    data: { id: id, statusId:52},
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (Data) {

                        if (Data.Data.ResultType == "Success") {
                            LoadNotificationData();
                        } else {

                        }
                    },
                    error: function () {
                        alert("An error has occured!!!");
                    }
                });
            }


        function NotificationClose(e) {
            e.preventDefault();
            e.stopPropagation();
            var id = $(this).attr("data-id");
                $.ajax({

                    url: GLB_BASEURL + "/Dashboard/ReadNotification",
                    type: "Get",
                    data: { id: id, statusId: 53 },
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (Data) {

                        if (Data.Data.ResultType == "Success") {
                            LoadNotificationData();
                        } else {

                        }
                    },
                    error: function () {
                        alert("An error has occured!!!");
                    }
                });
            }


            $.ajax({
                type: "GET",
                url: "/Dashboard/GetAdminReports",
                dataType: "json",
                success: function (Response) {


                    if (!$.isEmptyObject(Response)) {
                        if (Response.Data.ResultType == "Success") {
                            
                            //LoadJVServersPiChart(Response.Data.ResultData);

                            LoadTMostPopularProductPiChartPiChart(Response.Data.ResultData);

                            LoadAccountTrends(document.getElementById('profileActions'), Response.Data.EventsData);
                            LoadActions(document.getElementById('actionsRpt'), Response.Data.ActionsData);
                            //LoadTotalUsedIPsPiChart(Response.Data.ResultData);
                        } else {

                        }
                    }
                },
                failure: function (errMsg) {
                    alert("hello2");

                }
            });

        });


        function LoadJVServersPiChart(ChartsData) {


            var dom = document.getElementById("JVServersPiChart");
            var myChart = echarts.init(dom);
            var app = {};
            option = null;
            option = {
                title: {
                    text: '',
                    subtext: '',
                    x: 'center'
                },
                tooltip: {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: {
                    orient: 'horizontal',
                    left: 'left',
                    data: ['All Slots', 'Used Slots','Free Slots']
                },
                series: [
                    {
                        name: 'Plans',
                        type: 'pie',
                        radius: '45%',
                        center: ['50%', '60%'],
                        data: [

                            { value: ChartsData.AllSlotsOnJVBox, name: 'All Slots' },
                            { value: ChartsData.UsedSlotsOnJVBox, name: 'Used Slots' },
                            { value: ChartsData.FreeSlotsOnJVServer, name: 'Free Slots' }
                        ],
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }
                ]
            };
            ;
            if (option && typeof option === "object") {
                myChart.setOption(option, true);
            }
        }

        function LoadTMostPopularProductPiChartPiChartx(ChartsData) {


            ;

            var nameList = [
                ChartsData.PlanNames.split(',')
            ];

            var dom = document.getElementById("MostPopularProductPiChart");
            var myChart = echarts.init(dom);
            var app = {};
            option = null;
            var data = genData(50, nameList);

            option = {
                title: {
                    text: '',
                    subtext: '',
                    x: 'center'
                },
                tooltip: {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: {
                    type: 'scroll',
                    orient: 'vertical',
                    right: 10,
                    top: 20,
                    bottom: 20,
                    data: data.legendData,

                    selected: data.selected
                },
                series: [
                    {
                        name: 'Product',
                        type: 'pie',
                        radius: '55%',
                        center: ['40%', '50%'],
                        data: data.seriesData,
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }
                ]
            };




            function genData(count, nameList) {
                ;
                var legendData = [];
                var seriesData = [];
                var selected = {};
                for (var i = 0; i < 50; i++) {
                    name = Math.random() > 0.65
                        ? makeWord(4, 1) + '·' + makeWord(3, 0)
                        : makeWord(2, 1);
                    legendData.push(name);
                    seriesData.push({
                        name: name,
                        value: Math.round(Math.random() * 100000)
                    });
                    selected[name] = i < 6;
                }

                return {
                    legendData: legendData,
                    seriesData: seriesData,
                    selected: selected
                };

                function makeWord(max, min) {
                    var nameLen = Math.ceil(Math.random() * max + min);
                    var name = [];
                    for (var i = 0; i < nameLen; i++) {
                        name.push(nameList[Math.round(Math.random() * nameList.length - 1)]);
                    }
                    return name.join('');
                }
            }
            ;
            if (option && typeof option === "object") {
                myChart.setOption(option, true);
            }
        }

        function getFormatedDateTime(getDate) {
            var current_datetime = new Date(parseInt(getDate.substr(6)));
            var dt = current_datetime.getFullYear() + "-" + (current_datetime.getMonth() + 1) + "-" + current_datetime.getDate() + " " + current_datetime.getHours() + ":" + current_datetime.getMinutes() + ":" + current_datetime.getSeconds();
            return dt;
        }


        function LoadTMostPopularProductPiChartPiChart(ChartsData) {

            var nameList =
                ChartsData.PlanNames;

            var dom = document.getElementById("MostPopularProductPiChart");
            var myChart = echarts.init(dom);
            var app = {};
            option = null;
            option = {
                title: {
                    text: '',
                    subtext: '',
                    x: 'left',
                },
                tooltip: {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: {
                    orient: 'horizontal',
                    left: 'left',
                    data: ChartsData.PlanNames
                },
                series: [
                    {
                        name: 'MP Box',
                        type: 'pie',
                        radius: '45%',
                        center: ['50%', '60%'],
                        data: ChartsData.PlanNamesWithUsages,
                            //[{ name: "LikeX1K", value: 3 }, { name: "LikeX2K", value: 2 }, { name: "LikeX300", value: 1 }, { name: "LikeX500", value: 3 }, { name: "LikeX750", value: 1 }, { name: "No Boost", value: 8 }],
                        labelLine: {
                            normal: {
                                show: true

                            }
                        },
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        lable:
                        {
                            show: true,
                            position: 'inside'
                        }
                    }
                ]
            };
            ;
            if (option && typeof option === "object") {
                myChart.setOption(option, true);
            }
        }

        function LoadTotalUsedIPsPiChart(ChartsData) {


            var dom = document.getElementById("TotalUsedIPsPiChart");
            var myChart = echarts.init(dom);
            var app = {};
            option = null;
            option = {
                title: {
                    text: '',
                    subtext: '',
                    x: 'center'
                },
                tooltip: {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: {
                    orient: 'horizontal',
                   // left: 'left',
                    right:'right',
                    data: ['All Proxy IPs', 'Used Proxy IPs', 'Remaining Proxy IPs',]
                },
                series: [
                    {
                        name: 'Proxy IPs',
                        type: 'pie',
                        radius: '45%',
                        center: ['50%', '60%'],
                        data: [
                            { value: ChartsData.AllAvailableIPs, name: 'All Proxy IPs' },
                            { value: ChartsData.TotalUsedIPs, name: 'Used Proxy IPs' },
                            { value: ChartsData.RemainingProxyIPs, name: 'Remaining Proxy IPs' }


                        ],
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }
                ]
            };
            ;
            if (option && typeof option === "object") {
                myChart.setOption(option, true);
            }
        }

        function LoadAccountTrends(elem, ChartsData) {

            var morrisData = [];

            for (i = 0; i < ChartsData.length; i++) {
                morrisData.push({eDate: ChartsData[i].eDate, 'signups': ChartsData[i].Signups, 'downgrades': ChartsData[i].Downgrades, 'upgrades': ChartsData[i].Upgrades});
            }

            $(elem).empty();
            Morris.Line({
              element: elem,
              data: morrisData,
              xkey: 'eDate',
              ykeys: ['signups', 'downgrades', 'upgrades'],
              labels: ['signups', 'downgrades', 'upgrades']
            });
            //Morris.Bar({
            //    element: elem,
            //    data: morrisData,
            //    xkey: 'eDate',
            //    ykeys: ['signups', 'downgrades', 'upgrades'],
            //    labels: ['signups', 'downgrades', 'upgrades'],
            //    resize: true,
            //    smooth: false,
            //    pointSize: 3,
            //    pointStrokeColors: ['#FF4558'],
            //    gridLineColor: '#e3e3e3',
            //    behaveLikeLine: true,
            //    numLines: 6,
            //    gridtextSize: 14,
            //    lineWidth:2,
            //    hideHover: 'auto',
            //    lineColors: ['#FF4558'],
            //    xLabelAngle: 45,
            //    parseTime: false,
            //    barColors: ["#6495ED", "#32CD32", "#FEC81B"],
            //});

        }

        function LoadActions(elem, ChartsData) {
            var morrisData = [];
            for (i = 0; i < ChartsData.length; i++) {
                ChartsData[i].ActionDate = ChartsData[i].ActionDate.parseNETDate();
            }
            var dateArray = [...new Set(ChartsData.map(s => s.ActionDate))];  
            debugger
            for (i = 0; i < dateArray.length; i++) {
                morrisData.push({
                    eDate: dateArray[i],
                    //'Block 4': ChartsData.find(b => b.ActionDate == dateArray[i] && b.Name == 'Block 4') ? ChartsData.find(b => b.ActionDate == dateArray[i] && b.Name == 'Block 4').Total : 0,
                    //'Block 5': ChartsData.find(b => b.ActionDate == dateArray[i] && b.Name == 'Block 5') ? ChartsData.find(b => b.ActionDate == dateArray[i] && b.Name == 'Block 5').Total: 0,
                    'Action Block': ChartsData.find(b => b.ActionDate == dateArray[i] && b.Name == 'Action Block') ? ChartsData.find(b => b.ActionDate == dateArray[i] && b.Name == 'Action Block').Total : 0,
                    'Hard Blocked': ChartsData.find(b => b.ActionDate == dateArray[i] && b.Name == 'Hard Blocked') ? ChartsData.find(b => b.ActionDate == dateArray[i] && b.Name == 'Hard Blocked').Total : 0,                   
                    'Password Block': ChartsData.find(b => b.ActionDate == dateArray[i] && b.Name == 'Password Block') ? ChartsData.find(b => b.ActionDate == dateArray[i] && b.Name == 'Password Block').Total : 0
                });
            }
            $(elem).empty();
              Morris.Line({
              element: elem,
              data: morrisData,
              xkey: 'eDate',
              ykeys: ['Action Block', 'Hard Blocked', 'Password Block'],  //'Block 4', 'Block 5', 
              labels: ['action block', 'hard blocked', 'password block']  //'block 4', 'block 5', 
            });
            //Morris.Bar({
            //    element: elem,
            //    data: morrisData,
            //    xkey: 'eDate',
            //    ykeys: ['Block 2', 'Block 3', 'Block 4', 'Password Compromises'],
            //    labels: ['Block 2', 'Block 3', 'Block 4', 'Password Compromises'],
            //    resize: true,
            //    smooth: false,
            //    pointSize: 3,
            //    pointStrokeColors: ['#FF4558'],
            //    gridLineColor: '#e3e3e3',
            //    behaveLikeLine: true,
            //    numLines: 6,
            //    gridtextSize: 14,
            //    lineWidth:2,
            //    hideHover: 'auto',
            //    lineColors: ['#FF4558'],
            //    xLabelAngle: 45,
            //    parseTime: false,
            //    barColors: ["#6495ED", "#32CD32", "#FEC81B", '#DA70D6'],
            //});
        }
        if (!String.prototype.parseNETDate) {
                String.prototype.parseNETDate = function () {
                    if (this.indexOf('-') == -1) {
                        var d = new Date(parseInt(this.slice(6, 19)));
                        const delimiter = '-';
                        return [d.getFullYear(), d.getMonth() + 1, d.getDate()].join(delimiter);
                    } else {
                        var d2 = new Date(parseInt(this.slice(6, 20)));
                        const delimiter = '-';
                        return [d.getFullYear(), d.getMonth() + 1, d.getDate()].join(delimiter);
                    }
                };
        }


    </script>
}

<style type="text/css">
    .reportsDiv {
        text-align: center
    }

        .reportsDiv h1 {
            font-size: 22pt;
            border-bottom: 2px solid #ff652f;
            display: inline-block;
            line-height: 40pt;
            margin-bottom: 18pt;
        }

    .clickable {
        cursor: pointer;
    }

    .panel-heading span {
        margin-top: -20px;
        font-size: 15px;
        margin-left: 15px;
    }

    .btn_refreshJVSection {
        cursor: pointer
    }

    .loadingSpinner {
        text-align: center;
        padding: 25px 0;
        font-size: 25pt;
        color: yellowgreen;
    }

    #Modal_BotDetail .modal-body {
        position: relative;
        padding: 15px;
        height: 360px;
        overflow-y: scroll;
    }

    .main {
        padding-top: 46px;
    }
</style>
