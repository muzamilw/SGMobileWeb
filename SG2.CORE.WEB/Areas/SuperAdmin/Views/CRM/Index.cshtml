@using PagedList.Mvc
@using PagedList;
@using SG2.CORE.MODAL.ViewModals.Backend;
@using SG2.CORE.COMMON;
@model SG2.CORE.MODAL.ViewModals.Backend.CustomerIndexViewModel
@{
    /**/

    ViewBag.Title = "User Listing";
    Layout = "~/Areas/SuperAdmin/Views/Shared/_Layoutnew.cshtml";
    var BaseURl = ViewBag.BaseUrl;

    List<SelectListItem> appStatus = new List<SelectListItem>();

    List<SelectListItem> JarveeStatus = new List<SelectListItem>();

    List<SelectListItem> appProductIds = new List<SelectListItem>();

    List<SelectListItem> appSubscription = new List<SelectListItem>();

    SelectListItem ActiveItem = new SelectListItem() { Value = "25", Text = "Active Scbscription" };
    SelectListItem InActiveItem = new SelectListItem() { Value = "27", Text = "InActive Scbscription" };
    appSubscription.Add(ActiveItem);
    appSubscription.Add(InActiveItem);

    foreach (var item in Model.ProductIds)
    {
        appProductIds.Add(new SelectListItem { Text = item.Name, Value = item.StripePlanId.ToString() });


    }
    foreach (var dr in Model.ApplicationStatuses.Where(x => x.StatusName == "JV"))
    {
        JarveeStatus.Add(new SelectListItem { Text = dr.StatusValue, Value = dr.StatusId.ToString() });
    }

    foreach (var dr in Model.ApplicationStatuses.Where(x => x.StatusName == "Customer"))
    {
        appStatus.Add(new SelectListItem { Text = dr.StatusValue, Value = dr.StatusId.ToString() });
    }
}
@section styles{
    <link href="~/Content/ThemeAssets/css/backendcss.css" rel="stylesheet" />
    <link href="~/Content/ThemeAssets/css/style.css" rel="stylesheet" type="text/css">
    <link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet">
    <style type="text/css">

        .form-wrap .search-wrap input[type=search] {
            font-size: 0.85rem;
            line-height: 22px;
            height: 35px;
        }

        input[type=search] {
            border-bottom: 2px solid #eceffb;
            font-style: normal;
            padding: 0px 24px 10px;
        }

        button.searchBtn {
            height: 37px;
        }

        button.width {
            width: 60px;
        }

        .product-list-inner {
            background-color: #fff;
        }

        .pagination {
            float: right;
        }
    </style>
}

<div class="main">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h2>CRM</h2>
            </div>
        </div>
    </div>
</div>

<div class="form-wrap">
    <div class="container">
        <div class="inner-colmn">
            @using (Html.BeginForm("Index", "CRM", FormMethod.Get, new { @id = "Form_SearchCriteria" }))
            {
                <div class="row">
                    <div class="col-md-3 col-sm-12 mb-2">
                        <div class="search-wrap clearfix">
                            @Html.TextBoxFor(model => model.SearchCriteria, htmlAttributes: new { @placeholder = "Search here", @type = "search", @class = "input" })
                        </div>
                    </div>
                    <div class="col-md-2 col-sm-12 mb-2">
                        <div class="product">
                            <label>Plan</label>
                            <div class="select">
                                @Html.DropDownListFor(model => model.ProductId, appProductIds, "Plan (All)")
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2 col-sm-12 mb-2 hidden">
                        <div class="product">
                            <label>Subscription</label>
                            <div class="select">
                                @Html.DropDownListFor(model => model.Subscription, appSubscription, "Subscription (All)")
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2 col-sm-12 mb-2">
                        <div class="product">
                            <fieldset>
                                <div class="custom-control custom-radio">
                                    @{

                                        var aAttributes = new Dictionary<string, object>();
                                        aAttributes.Add(@"class", "custom-control-input");
                                        aAttributes.Add(@"id", "customRadio1");
                                        aAttributes.Add("onchange ", "this.form.submit();");
                                        if (Model.profileType == null)
                                        {
                                            aAttributes.Add("Checked", "checked");
                                        }
                                    }
                                    @Html.RadioButtonFor(model => model.profileType, "", aAttributes)



                                    <label class="custom-control-label" for="customRadio1">All</label>
                                </div>
                            </fieldset>
                            <fieldset>
                                <div class="custom-control custom-radio">
                                    @{

                                        var cAttributes = new Dictionary<string, object>();
                                        cAttributes.Add(@"class", "custom-control-input");
                                        cAttributes.Add(@"id", "customRadio2");
                                        cAttributes.Add("onchange ", "this.form.submit();");

                                        if (Model.profileType == 0)
                                        {
                                            cAttributes.Add("Checked", "checked");
                                        }
                                    }
                                    @Html.RadioButtonFor(model => model.profileType, "0", cAttributes)
                                    <label class="custom-control-label" for="customRadio2">Regular Profiles</label>
                                </div>
                            </fieldset>
                            <fieldset>
                                <div class="custom-control custom-radio">
                                    @{

                                        var bAttributes = new Dictionary<string, object>();
                                        bAttributes.Add(@"class", "custom-control-input");
                                        bAttributes.Add(@"id", "customRadio3");
                                        bAttributes.Add("onchange ", "this.form.submit();");

                                        if (Model.profileType == 0)
                                        {
                                            bAttributes.Add("Checked", "checked");
                                        }
                                    }
                                    @Html.RadioButtonFor(model => model.profileType, "1", bAttributes)

                                    <label class="custom-control-label" for="customRadio3">Broker Profiles</label>
                                </div>
                            </fieldset>
                        </div>
                    </div>

                    <div class="col-md-3 col-sm-12 ">
                        <div class="product">
                            <label class="d-block">&nbsp;</label>

                            <a href="@BaseURl/crm" id="" class="btn btn-secondary d-inline-block">
                                <i class="fa fa-times-circle"></i> Reset
                            </a>
                        </div>
                    </div>


                </div>
            }
        </div>
    </div>
</div>

<div class="product-listing-sec">
    <div class="container">
        <div class="product-list-inner">
            <div class="row">
                <div class="col-xs-12 table-responsive">
                    <table id="ResponsiveTable" class="table table-xl mb-0 table-hover">
                        <thead>
                            <tr>
                                <th scope="col">Name</th>
                                <th scope="col">F</th>
                                <th scope="col">U</th>
                                <th scope="col">L</th>
                                <th scope="col">S</th>
                                <th scope="col">Broker/Regular</th>
                                <th scope="col"></th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var item in Model.CustomerListing)
                            {
                            <tr href="@BaseURl/crm/TargettingInformation?id=@Url.Encode(CryptoEngine.Encrypt(item.ID))&SPId=@Url.Encode(CryptoEngine.Encrypt(item.SocialProfileId))">
                                <td data-label="ID">
                                    <div style="width: 30px;
    float: left;">
                                        <img src="~/Content/ThemeAssets/Images/InstagramLogoTransparent.png" width="24">
                                    </div>
                                    <div>
                                        <a style="color:black;" href="@BaseURl/crm/detailpage?id=@Url.Encode(CryptoEngine.Encrypt(item.ID))&SPId=@Url.Encode(CryptoEngine.Encrypt(item.SocialProfileId))">@(string.IsNullOrEmpty(item.InstaUsrName) ? "--" : item.InstaUsrName)</a><br />
                                        @(string.IsNullOrEmpty(item.CustomerEmail) ? "--" : item.CustomerEmail) <br />

                                    </div>

                                </td>
                                <td>

                                    <input class="toggler" data-size="mini" id="FollowOn" type="checkbox" checked data-toggle="toggle" data-onstyle="success" value="@((item.FollowOn ?? false) == true ? "on": "off")">
                                </td>
                                <td>

                                    <input class="toggler" data-size="mini" id="FollowOn" type="checkbox" checked data-toggle="toggle" data-onstyle="success" value="@((item.UnFollFollowersAfterMinDays ?? false) == true ? "on": "off")">
                                </td>
                                <td>

                                    <input class="toggler" data-size="mini" id="FollowOn" type="checkbox" checked data-toggle="toggle" data-onstyle="success" value="@(item.AfterFollLikeuserPosts == true ? "on": "off")">
                                </td>
                                <td>

                                    <input class="toggler" data-size="mini" id="FollowOn" type="checkbox" checked data-toggle="toggle" data-onstyle="success" value="@(item.AfterFollViewUserStory == true ? "on": "off")">
                                </td>

                                <td data-label="Box">@(item.BrokerAccount ? "Broker" : "Regular")</td>
                                @*<td data-label="Status" class="status">@item.Status</td>*@
                                @*<td data-label="JVBoxStatus" class="JVBoxStatus">@(string.IsNullOrEmpty(item.JVBoxStatus) ? "--" : item.JVBoxStatus)</td>*@
                              <td >
                                    @{
                                        var statusclass = "";
                                        switch (item.Status)
                                        {
                                            case "Valid": statusclass = "badge-primary"; break;
                                            case "Action Blocked": statusclass = "badge-danger"; break;
                                            case "Hard Blocked": statusclass = "badge-danger"; break;
                                            case "Password Blocked": statusclass = "badge-danger"; break;
                                            default:
                                                statusclass = "badge-primary";
                                                break;
                                        }
                                    }

                                    <span class="badge @statusclass label-square mr-1 mb-1 display-inline">

                                        <span>@item.Status</span>
                                    </span>
                                </td>

                                <td >
                                    @if (item.Products != null)
                                    {
                                        <div class="badge badge-success label-square mr-1 mb-1 display-inline">Plan: @item.Products</div>
                                    }
                                    else
                                    {
                                        <div class="badge badge-success label-square mr-1 mb-1 display-inline">Plan: FREE</div>
                                    }
                                </td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="pagination-wrap">
            Page @(Model.TotalRecord < Model.PageNumber ? 0 : Model.PageNumber)
            of @Model.TotalRecord   @Html.PagedListPager((IPagedList<CustomerListingViewModel>)Model.CustomerListing, page => Url.Action("Index", new { page, Model.SearchCriteria, Model.StatusId, Model.ProductId }))
        </div>
    </div>
</div>




@section scripts{
    <script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>
    <script type="text/javascript">

        $(document).ready(function () {
            $('.input').keypress(function (e) {
                if (e.which == 13) {
                    $('#Form_SearchCriteria').submit();
                    return false;    //<---- Add this line
                }
            });
            $('#ProductId,#Subscription,#profileType').change(function () {
                this.form.submit();
            });

             $('.toggler').each(function (index, currentElement) {
                var vali =  $(this).val();
                if (vali == "on")
                    $(this).prop('checked', true).change();
                else
                     $(this).prop('checked', false).change();

                 $(this).attr("disabled", true);
            });
        });



    </script>

}