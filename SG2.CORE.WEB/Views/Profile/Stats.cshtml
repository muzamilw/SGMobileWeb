@using SG2.CORE.MODAL.DTO.Customers
@{

    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_Layout_LoggedIn.cshtml";

    var currentUser = (CustomerDTO)ViewBag.CurrentUser;
    var socailProfiles = (List<CustomerSocialProfileDTO>)ViewBag.SocailProfiles;

    List<SelectListItem> profiles = new List<SelectListItem>();
    foreach (var item in socailProfiles)
    {
        profiles.Add(new SelectListItem { Text = item.ProfileName, Value = item.SocialProfileId.ToString() });
    }

}

<div class="main">
    <div class="container">
        <div class="row">
            <div class="col-xs-8">
                <h4>Select which growth engine you want to tweak and boost.</h4>
              

            </div>
            <div class="col-xs-4 text-right">
                <button type="button" class="btn btn-primary btn-height47">

                    <i class="fa fa-plus"></i> Become an Afilliate
                </button>
            </div>
            <div class="col-xs-12">
                <hr />
            </div>
            <div class="col-xs-8">
                <h3>Social Media Profiles</h3>
            </div>
            <div class="col-xs-4 text-right">
               
                    <button type="button" class="btn btn btn-height47">

                        <i class="fa fa-plus"></i> Social Media Profile
                    </button>
                

            </div>
            <div class="col-xs-12">
                <hr />
            </div>

            @foreach (var item in socailProfiles)
            {
                <div class="col-xs-6">
                    @if (item.SocialProfileTypeId == 30)
                    {
                        <img src="~/Content/ThemeAssets/Images/InstagramLogoTransparent.png" width="49" />
                    }
                    <a href="/Profile/Basic?socialProfileId=@item.SocialProfileId">@item.SocialUsername</a>
                </div>
                <div class="col-xs-6 text-right">
                    @if (@socailProfiles.FirstOrDefault().SubscriptionName != null)
                    {
                        <h1 class="text-primary">Plan: @item.SubscriptionName</h1>
                    }
                    else
                    {
                        <b>Free Plan</b>
                    }

                </div>
            }

            <div class="col-xs-12">
                &nbsp;
            </div>
            <div class="col-xs-6">
                <a href="#" class="btn btn-primary btn-height64 btn-block">
                    Insights And Statistics
                </a>
            </div>
            <div class="col-xs-6">
                <a href="/Profile/Target?socialProfileId=@socailProfiles.FirstOrDefault().SocialProfileId" class="btn btn-primary btn-height64 btn-block btn-white">
                    Target Preferences
                </a>
            </div>
        </div>
    </div>
</div>


@*<div class="main">
        <div class="container">
            <div class="row">
                <div class="col-xs-12">
                    <h2>
                    Hi,

                        @currentUser.FirstName @currentUser.SurName !</h2>
                    <h4>See how well you instagram is doing.</h4>
                </div>
            </div>
        </div>
    </div>*@

<br />

<div class="information-form">
    <div class="container">
        <div class="information-form-inner">
            <div class="row">

                <div class="col-xs-8">
                    <div id="FollowerBarChart" style="width:850px; height:500px"></div>
                </div>
                <div class="col-xs-4">
                    <div id="FollowerPiChart" style="width:400px; height:500px"></div>
                </div>

                <div class="col-xs-8">
                    <div id="LikeBarChart" style="width:850px; height:500px"></div>
                </div>
                <div class="col-xs-4">
                    <div id="LikePiChart" style="width:400px; height:500px"></div>
                </div>
            </div>

        </div>
    </div>
</div>


<style type="text/css">
    .btn-height47 {
        height: 47px;
        font-weight: 400;
    }

    .btn-height64 {
        height: 64px;
        font-weight: 400;
        font-size: 3rem;
    }

    .btn-white {
        background-color: white;
        color: darkgray;
    }

        .btn-white:hover {
            background-color: white;
            color: darkgray;
        }

    .main .container hr {
        border-bottom: 2px solid #ccc
    }
</style>

@section Scripts{

    <script src="~/Scripts/ECharts/echarts.js"></script>
    <script src="~/Scripts/ECharts/echarts-all.js"></script>
    <script src="~/Scripts/ECharts/chart/bar.js"></script>
    <script src="~/Scripts/ECharts/chart/line.js"></script>
    <script src="~/Scripts/ECharts/chart/chord.js"></script>
    <script src="~/Scripts/ECharts/chart/eventRiver.js"></script>
    <script src="~/Scripts/ECharts/chart/force.js"></script>
    <script src="~/Scripts/ECharts/chart/funnel.js"></script>
    <script src="~/Scripts/ECharts/chart/gauge.js"></script>
    <script src="~/Scripts/ECharts/chart/k.js"></script>
    <script src="~/Scripts/ECharts/chart/map.js"></script>
    <script src="~/Scripts/ECharts/chart/pie.js"></script>
    <script src="~/Scripts/ECharts/chart/radar.js"></script>
    <script src="~/Scripts/ECharts/chart/scatter.js"></script>
    <script src="~/Scripts/ECharts/chart/tree.js"></script>
    <script src="~/Scripts/ECharts/chart/treemap.js"></script>
    <script src="~/Scripts/ECharts/chart/venn.js"></script>
    <script src="~/Scripts/ECharts/chart/wordCloud.js"></script>
    <script src="~/Scripts/ECharts/chart/echarts-all-english-v2.js"></script>
    <script type="text/javascript">

        $("document").ready(function () {


            $.ajax({
                type: "GET",
                url: "/user/GetFollowersStatistics",
                dataType: "json",
                success: function (Response) {


                    if (!$.isEmptyObject(Response)) {
                        if (Response.Data.ResultType == "Success") {


                            LoadFollowersBarChart(Response.Data.ResultData);
                            LoadFollowersPiChart(Response.Data.ResultData);
                            LoadLikeBarChart(Response.Data.ResultData);
                            LoadLikePiChart(Response.Data.ResultData);

                        } else {

                        }
                    }
                },
                failure: function (errMsg) {
                    alert("hello2");

                }
            });

        });

        function LoadFollowersBarChart(ChartsData) {

            var dom = document.getElementById("FollowerBarChart");
            var myChart = echarts.init(dom);
            var app = {};
            option = null;
            option = {
                title: {
                    text: ''
                },
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross',
                        label: {
                            backgroundColor: '#6a7985'
                        }
                    }
                },
                legend: {
                    data: ['Followers', 'Followers Change', 'Followings', 'Followings Change Ratio']
                },
                toolbox: {
                    show: true,
                    feature: {


                        magicType: { show: true, type: ['line', 'bar'] },
                        restore: { show: true },
                        saveAsImage: { show: true }
                    }
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: [
                    {
                        type: 'category',
                        boundaryGap: false,
                        data: ChartsData.Date// ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                    }
                ],
                yAxis: [
                    {
                        type: 'value'
                    }
                ]
                ,
                series: [
                    {
                        name: 'Followers',
                        type: 'line',
                        stack: ChartsData.TotalFollowers,
                        areaStyle: {},
                        data: ChartsData.FollowersData
                    },
                    {
                        name: 'Followers Change',
                        type: 'line',
                        stack: ChartsData.TotalFollowersGain,
                        areaStyle: {},
                        data: ChartsData.FollowersGainData
                    },
                    //{
                    //    name: 'Avg. Follower Change Per Day',
                    //    type: 'line',
                    //    stack: '8000',
                    //    areaStyle: { normal: {} },
                    //    data: ChartsData.AVGFollowersData.split(',')
                    //},
                    {
                        name: 'Followings',
                        type: 'line',
                        stack: ChartsData.TotalFollowings,
                        areaStyle: {},
                        data: ChartsData.FollowingsData
                    },
                    {
                        name: 'Followings Change Ratio',
                        type: 'line',
                        stack: ChartsData.TotalFollowingsRatio,
                        areaStyle: {},
                        data: ChartsData.FollowingsRatioData
                    }
                ]
            };
            ;


            myChart.setOption(option);
            if (option && typeof option === "object") {
                myChart.setOption(option, true);
            }

        }

        function LoadFollowersPiChart(ChartsData) {


            var dom = document.getElementById("FollowerPiChart");
            var myChart = echarts.init(dom);
            var app = {};
            option = null;
            option = {
                title: {
                    text: '',
                    subtext: '',
                    x: 'center'
                },
                tooltip: {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: {
                    orient: 'vertical',
                    left: 'left',
                    data: ['Followers', 'Followers Change', 'Followings', 'Followings Change Ratio']
                },
                series: [
                    {
                        name: 'Followers',
                        type: 'pie',
                        radius: '45%',
                        center: ['50%', '60%'],
                        data: [
                            { value: ChartsData.TotalFollowers, name: 'Followers' },
                            { value: ChartsData.TotalFollowersGain, name: 'Followers Change' },
                            //{ value: 234, name: 'Avg. Follower Change Per Day' },
                            { value: ChartsData.TotalFollowings, name: 'Followings' },
                            { value: ChartsData.TotalFollowingsRatio, name: 'Followings Change Ratio' }
                        ],
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }
                ]
            };
            ;
            if (option && typeof option === "object") {
                myChart.setOption(option, true);
            }
        }

        function LoadLikeBarChart(ChartsData) {

            var dom = document.getElementById("LikeBarChart");
            var myChart = echarts.init(dom);
            var app = {};
            option = null;
            option = {
                title: {
                    text: ''
                },
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross',
                        label: {
                            backgroundColor: '#6a7985'
                        }
                    }
                },
                legend: {
                    data: ['Like', 'Comment', 'Like Comment', 'Engagement']
                },
                toolbox: {
                    show: true,
                    feature: {


                        magicType: { show: true, type: ['line', 'bar'] },
                        restore: { show: true },
                        saveAsImage: { show: true }
                    }
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: [
                    {
                        type: 'category',
                        boundaryGap: false,
                        data: ChartsData.Date// ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                    }
                ],
                yAxis: [
                    {
                        type: 'value'
                    }
                ]
                ,
                series: [
                    {
                        name: 'Like',
                        type: 'line',
                        stack: ChartsData.TotalLike,
                        areaStyle: {},
                        data: ChartsData.LikeData
                    },
                    {
                        name: 'Comment',
                        type: 'line',
                        stack: ChartsData.TotalComment,
                        areaStyle: {},
                        data: ChartsData.CommentData
                    },
                    //{
                    //    name: 'Avg. Follower Change Per Day',
                    //    type: 'line',
                    //    stack: '8000',
                    //    areaStyle: { normal: {} },
                    //    data: ChartsData.AVGFollowersData.split(',')
                    //},
                    {
                        name: 'Like Comment',
                        type: 'line',
                        stack: ChartsData.TotalFollowings,
                        areaStyle: {},
                        data: ChartsData.LikeCommentData
                    },
                    {
                        name: 'Engagement',
                        type: 'line',
                        stack: ChartsData.TotalEngagement,
                        areaStyle: {},
                        data: ChartsData.Engagement
                    }
                ]
            };
            ;


            myChart.setOption(option);
            if (option && typeof option === "object") {
                myChart.setOption(option, true);
            }

        }

        function LoadLikePiChart(ChartsData) {

            ;
            var dom = document.getElementById("LikePiChart");
            var myChart = echarts.init(dom);
            var app = {};
            option = null;
            option = {
                title: {
                    text: '',
                    subtext: '',
                    x: 'center'
                },
                tooltip: {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: {
                    orient: 'vertical',
                    left: 'left',
                    data: ['Like', 'Comment', 'Like Comment', 'Engagement']
                },
                series: [
                    {
                        name: 'Followers',
                        type: 'pie',
                        radius: '45%',
                        center: ['50%', '60%'],
                        data: [
                            { value: ChartsData.TotalLike, name: 'Like' },
                            { value: ChartsData.TotalComment, name: 'Comment' },
                            //{ value: 234, name: 'Avg. Follower Change Per Day' },
                            { value: ChartsData.TotalLikeComment, name: 'Like Commen' },
                            { value: ChartsData.TotalEngagement, name: 'Engagement' }
                        ],
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }
                ]
            };
            ;
            if (option && typeof option === "object") {
                myChart.setOption(option, true);
            }
        }

    </script>

    @Html.DropDownList("SocialProfile", profiles)
}