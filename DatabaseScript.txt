 
 
 --#######################################  2020-02-19 ################################################################################

alter Procedure [dbo].[SG2_usp_Report_GetMostUsedProductData]   -- '2019-01-01', '2019-12-12'  
(      
  @dtFromDate Date,      
  @dtToDate   Date      
)      
As      
Begin       
SET FMTONLY OFF;      
      

-- [SG2_usp_Report_GetMostUsedProductData]  '2019-01-01', '2020-02-20'  
   DECLARE @iTotalPlan BIGINT      
           
   SELECT   @iTotalPlan =  count(t.PaymentPlanId)  
   FROM [dbo].[SocialProfile] t   
   where t.PaymentPlanId <> 1
   --inner join     
   --WHERE T.StartDate BETWEEN @dtFromDate AND @dtToDate      
      
   SELECT p.PlanName as PlanName, count(s.PaymentPlanId) PlanSold   , @iTotalPlan as TotalPlanSold 
   
    FROM [dbo].[SocialProfile] S    
   inner join PaymentPlan p on s.PaymentPlanId = p.PaymentPlanId  
   left outer join 
   
	(select max(sp.PaymentDateTime) paymentdatetime, SocialProfileId, PaymentPlanId  
	from SocialProfile_Payments sp 
	
	group by  SocialProfileId, PaymentPlanId
	) pp on pp.SocialProfileId = s.SocialProfileId and pp.PaymentPlanId = s.PaymentPlanId
  WHERE pp.paymentdatetime BETWEEN @dtFromDate AND @dtToDate      
   GROUP BY p.PlanName   
      
      
End      


GO



GO
/****** Object:  StoredProcedure [dbo].[SG2_usp_Report_GetProfileEvents]    Script Date: 2/22/2020 5:30:50 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

      
ALTER Procedure [dbo].[SG2_usp_Report_GetProfileEvents]   -- '2019-01-01', '2019-12-12'  
(      
  @dtFromDate Date,      
  @dtToDate   Date      
)      
As      
Begin       
SET FMTONLY OFF;      
      

-- [SG2_usp_Report_GetProfileEvents]  '2018-02-1', '2020-02-20'  
   
      
   select cast( isnull(sdata.eDate, edata.eDate) as nvarchar(100)) as eDate, isnull(sdata.Signups,0) Signups, isnull(edata.Downgrades,0) Downgrades , isnull(edata.Upgrades,0) Upgrades, 0 as Deletes from 

(select CONVERT(date, CreatedOn) eDate, count(*) Signups from SocialProfile
where CONVERT(date, CreatedOn) between @dtFromDate and @dtToDate
group by CONVERT(date, CreatedOn) 
) sdata
full outer join (
select CONVERT(date, p.PaymentDateTime) eDate, 0 as Signups, sum(case when p.PaymentPlanId = 1 then 1 else 0 end) as Downgrades,  sum(case when p.PaymentPlanId > 1 then 1 else 0 end) as Upgrades from SocialProfile_Payments p
where CONVERT(date, p.PaymentDateTime) between @dtFromDate and @dtToDate
group by CONVERT(date, p.PaymentDateTime)
) edata on sdata.eDate = edata.eDate
order by sdata.eDate, edata.eDate
      
      
End      


 --#######################################  2020-02-19 ################################################################################


 /* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SocialProfile ADD
	AppVersion nvarchar(100) NULL,
	AppTimeZoneOffSet nvarchar(100) NULL,
	ManifestUpdatedSinceLastGet bit NULL
GO
ALTER TABLE dbo.SocialProfile SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


GO

/****** Object:  Table [dbo].[SocialProfile_Logs]    Script Date: 2/23/2020 3:44:18 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[SocialProfile_Logs](
	[LogFileId] [int] IDENTITY(1,1) NOT NULL,
	[SocialProfileId] [int] NULL,
	[LogData] [ntext] NULL,
	[LogDateTime] [datetime] NULL,
 CONSTRAINT [PK_SocialProfile_Logs] PRIMARY KEY CLUSTERED 
(
	[LogFileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [dbo].[SocialProfile_Logs]  WITH CHECK ADD  CONSTRAINT [FK_SocialProfile_Logs_SocialProfile_Logs] FOREIGN KEY([LogFileId])
REFERENCES [dbo].[SocialProfile_Logs] ([LogFileId])
GO

ALTER TABLE [dbo].[SocialProfile_Logs] CHECK CONSTRAINT [FK_SocialProfile_Logs_SocialProfile_Logs]
GO


 --#######################################  2020-03-03 ################################################################################
 
CREATE PROCEDURE [dbo].[SG2_usp_Report_GetActions] 
	 @dtFromDate Date,      
	 @dtToDate   Date  
AS

	SELECT 
	EnumerationValue.EnumerationValueId,
	EnumerationValue.Name, 
	CONVERT(date, SocialProfile_Actions.ActionDateTime) As ActionDate, 
	Count(*) as Total 
	FROM SocialProfile_Actions
	JOIN EnumerationValue on SocialProfile_Actions.ActionID = EnumerationValue.EnumerationValueId
	WHERE EnumerationValue.Name = 'Block 2' or EnumerationValue.Name = 'Block 3' or EnumerationValue.Name = 'Block 4' or EnumerationValue.Name = 'Password to be updated'
	AND (CONVERT(date, SocialProfile_Actions.ActionDateTime) between @dtFromDate and @dtToDate)
	GROUP BY EnumerationValue.EnumerationValueId,EnumerationValue.Name, CONVERT(date, SocialProfile_Actions.ActionDateTime)

GO




--############################################################# 2020-03-07 ################################################################################
 

  
alter Procedure [dbo].[SG2_usp_Get_EnumerationValue]  
  
As  
Begin  
   
  
 Select E.[Name] as Enumeration , EV.EnumerationValueId , EV.[Name], E.EnumerationId    
   
   
  FROM  Enumeration E inner join EnumerationValue EV  
      ON E.EnumerationId=EV.EnumerationId  
  WHERE EV.IsVisible = 1  
  order by Enumeration, SequenceNo   
End  

GO

alter Procedure [dbo].[SG2_usp_GetUserDetailsForbackOffice]--   '',1,1,1,'','',1        
  @rsSearchCrite Nvarchar(MAX),          
  @riPageNumber Int,          
  @riPageSize varchar(8),          
  @riStatusId int=null,          
  @riProductId varchar(250)=null,          
  @riJVStatus varchar(250)=null,          
  @riSubscription int=null,    
  @profileType int = null ,
  @BlockId int = null 
          
As          
Begin          
         -- [dbo].[SG2_usp_GetUserDetailsForbackOffice]   '',1,10,null,'','',null  
 -- Searches for Products based on given parameters            
 Declare @iFirstRow Int              
 Declare @iLastRow Int           
          
 Declare @xmlSearchCriteria Xml          
           
 IF @riStatusId=''          
 SET @riStatusId=NULL          
          
 IF @riJVStatus=''          
 SET @riJVStatus=NULL          
 --Set @xmlSearchCriteria = dbo.udf_UTL_UpdateWildcardInput(@rsSearchCriteria)          
          
 Set @iFirstRow  = (@riPageNumber-1) * @riPageSize + 1              
 Set @iLastRow = @riPageSize + @iFirstRow - 1           
           
 Declare  @tbResult table(          
 RowNumber     int ,          
 InstaName     nvarchar(250),          
 UserName      nvarchar(250),          
 CustomerId    int,          
 Products      nvarchar(250),          
 ProxyIPNumber nvarchar(15),          
 BoxName       nvarchar(250),          
 [Status]      nvarchar(100),          
 JVBoxStatus nvarchar(100),          
 SocialProfileName  nvarchar(250),          
 SocialProfileId   int,          
 CustomerEmail    nvarchar(250),  
 FollowOn bit,  
UnFollFollowersAfterMinDays bit,  
AfterFollLikeuserPosts bit,  
AfterFollViewUserStory bit  ,
BlockedStatus nvarchar(100)
          
 )           
          
 ;With CTE As          
 (           
  -- Get all Product information to create index          
            
  Select Distinct          
   SP.[SocialUsername] as SocialAccountName,          
   SP.[SocialProfileName] as SocialProfileName,          
   SP.SocialProfileId,          
   ISNULL(Customer.FirstName,'') + ' ' + ISNULL(Customer.SurName,'')  as [Name],          
   Customer.CustomerId as CustomerId,          
   SubS.PlanName as Products,          
          
   EV.[Name] as [Status],          
   Customer.updatedon,          
          
   customer.[EmailAddress] as EmailAddress ,          
            ROW_NUMBER() OVER (PARTITION BY SP.[SocialProfileId] ORDER BY SP.CreatedOn desc) AS RankId   ,  
   TI.FollowOn,  
   TI.UnFollFollowersAfterMinDays,  
   TI.AfterFollLikeuserPosts,  
   TI.AfterFollViewUserStory  ,
   (case when isnull(sp.BlockedStatus,0) = 0 then 'Valid'  else BlockStatus.Name end) as BlockedStatus
  
  
  From dbo.Customer Customer With (Nolock)           
  Inner join [dbo].[SocialProfile] SP ON SP.CustomerId=Customer.CustomerId          
        
 left join [dbo].PaymentPlan SubS           
  ON SubS.PaymentPlanId=isnull(SP.PaymentPlanId,1)           
    --AND SubS.StatusId=25          
 left join [dbo].[SocialProfile_Instagram_TargetingInformation] TI           
  On TI.[SocialProfileId]=SP.[SocialProfileId]          
 Left join dbo.EnumerationValue EV           
  ON EV.EnumerationValueId=SP.StatusId --And EV.EnumerationId=4    
  left outer join dbo.EnumerationValue BlockStatus on Sp.BlockedStatus = BlockStatus.EnumerationValueId
 Where (          
   ((@riStatusId is null) or Customer.StatusId = @riStatusId)          
          
   AND           
     (((@riProductId is null) or @riProductId ='' ) or  SubS.[StripePlanId] = @riProductId)          
  AND ((@riSubscription is null) or SubS.StatusId= @riSubscription)      
  AND ((@profileType is null) or isnull(Customer.IsBroker,0)= @profileType)    
  AND ((@BlockId is null or @BlockId = 69) or isnull(SP.BlockedStatus,0)= @BlockId)    
          
  And (           
    (@rsSearchCrite is null or @rsSearchCrite = '')           
    or (SP.[SocialProfileName] like '%' +@rsSearchCrite +'%'           
    or Customer.UserName like '%' +@rsSearchCrite +'%'          
     or SubS.PlanName like '%' +@rsSearchCrite +'%'           
           
     or EV.Name like '%' +@rsSearchCrite +'%'           
     or Customer.FirstName like '%' +@rsSearchCrite +'%'          
     or Customer.SurName like '%' +@rsSearchCrite +'%'          
     or Customer.[EmailAddress] like '%' +@rsSearchCrite +'%'          
     or SP.[SocialUsername] like '%' +@rsSearchCrite +'%'           
               
      )          
   )          
 )          
       )          
            
Insert into @tbResult(          
RowNumber  ,            
InstaName  ,            
UserName   ,            
CustomerId ,            
Products   ,            
        
[Status]   ,          
        
SocialProfileName,          
SocialProfileId,          
CustomerEmail,  
FollowOn,  
   UnFollFollowersAfterMinDays,  
   AfterFollLikeuserPosts,  
   AfterFollViewUserStory,
   BlockedStatus
          
)          
SELECT Distinct          
 ROW_NUMBER() Over (            
           Order By UpdatedOn desc          
            ) As RowNumber,        
SocialAccountName,[Name],CustomerId,Products,[Status],SocialProfileName,          
SocialProfileId,EmailAddress,  
FollowOn,  
   UnFollFollowersAfterMinDays,  
   AfterFollLikeuserPosts,  
   AfterFollViewUserStory,
   BlockedStatus
 FROM CTE  where RankId=1          
          
 Select tb.UserName,            
  InstaName,          
  tb.CustomerId,          
        Products,          
     ProxyIPNumber,          
     isnull(c.IsBroker,0) IsBroker,          
[Status],          
  JVBoxStatus,          
  SocialProfileName,          
  SocialProfileId,          
  CustomerEmail,          
  FollowOn,  
   UnFollFollowersAfterMinDays,  
   AfterFollLikeuserPosts,  
   AfterFollViewUserStory,  
   BlockedStatus,
     (Select Count(1) From @tbResult) TotalRecord          
 From @tbResult   tb       
 inner join Customer c on tb.CustomerId = c.CustomerId       
 Where RowNumber Between @iFirstRow And @iLastRow          
           
 Return @@Error           
End 
  
  


  

--############################################################# 2020-03-07 ################################################################################
 


  
GO
/****** Object:  StoredProcedure [dbo].[SG2_usp_Report_GetActions]    Script Date: 3/7/2020 1:57:49 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[SG2_usp_Report_GetActions] 
	 @dtFromDate Date,      
	 @dtToDate   Date  
AS
--  [dbo].[SG2_usp_Report_GetActions]  '2020-01-01', '2020-03-07'
	SELECT 
	EnumerationValue.EnumerationValueId,
	EnumerationValue.Name, 
	CONVERT(date, SocialProfile_Actions.ActionDateTime) As ActionDate, 
	Count(*) as Total 
	FROM SocialProfile_Actions
	JOIN EnumerationValue on SocialProfile_Actions.ActionID = EnumerationValue.EnumerationValueId
	WHERE EnumerationValueId in (66,67,68,70,71)
	AND (CONVERT(date, SocialProfile_Actions.ActionDateTime) between @dtFromDate and @dtToDate)
	GROUP BY EnumerationValue.EnumerationValueId,EnumerationValue.Name, CONVERT(date, SocialProfile_Actions.ActionDateTime)



GO
/****** Object:  StoredProcedure [dbo].[SG2_usp_GetUserDetailsForbackOffice]    Script Date: 3/8/2020 9:57:54 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER Procedure [dbo].[SG2_usp_GetUserDetailsForbackOffice]--   '',1,1,1,'','',1,0      
  @rsSearchCrite Nvarchar(MAX),          
  @riPageNumber Int,          
  @riPageSize varchar(8),          
  @riStatusId int=null,          
  @riProductId varchar(250)=null,          
  @riJVStatus varchar(250)=null,          
  @riSubscription int=null,    
  @profileType int = null ,
  @BlockId int = null 
          
As          
Begin          
         -- [dbo].[SG2_usp_GetUserDetailsForbackOffice]   '',1,10,null,'','',null  
 -- Searches for Products based on given parameters            
 Declare @iFirstRow Int              
 Declare @iLastRow Int           
          
 Declare @xmlSearchCriteria Xml          
           
 IF @riStatusId=''          
 SET @riStatusId=NULL          
          
 IF @riJVStatus=''          
 SET @riJVStatus=NULL          
 --Set @xmlSearchCriteria = dbo.udf_UTL_UpdateWildcardInput(@rsSearchCriteria)          
          
 Set @iFirstRow  = (@riPageNumber-1) * @riPageSize + 1              
 Set @iLastRow = @riPageSize + @iFirstRow - 1           
           
 Declare  @tbResult table(          
 RowNumber     int ,          
 InstaName     nvarchar(250),          
 UserName      nvarchar(250),          
 CustomerId    int,          
 Products      nvarchar(250),          
 ProxyIPNumber nvarchar(15),          
 BoxName       nvarchar(250),          
 [Status]      nvarchar(100),          
 JVBoxStatus nvarchar(100),          
 SocialProfileName  nvarchar(250),          
 SocialProfileId   int,          
 CustomerEmail    nvarchar(250),  
 FollowOn bit,  
UnFollFollowersAfterMinDays bit,  
AfterFollLikeuserPosts bit,  
AfterFollViewUserStory bit  ,
BlockedStatus nvarchar(100),
BrokerAppName nvarchar(500)
          
 )           
          
 ;With CTE As          
 (           
  -- Get all Product information to create index          
            
  Select Distinct          
   SP.[SocialUsername] as SocialAccountName,          
   SP.[SocialProfileName] as SocialProfileName,          
   SP.SocialProfileId,          
   ISNULL(Customer.FirstName,'') + ' ' + ISNULL(Customer.SurName,'')  as [Name],          
   Customer.CustomerId as CustomerId,          
   SubS.PlanName as Products,          
          
   EV.[Name] as [Status],          
   Customer.updatedon,          
          
   customer.[EmailAddress] as EmailAddress ,          
            ROW_NUMBER() OVER (PARTITION BY SP.[SocialProfileId] ORDER BY SP.CreatedOn desc) AS RankId   ,  
   TI.FollowOn,  
   TI.UnFollFollowersAfterMinDays,  
   TI.AfterFollLikeuserPosts,  
   TI.AfterFollViewUserStory  ,
   (case when isnull(sp.BlockedStatus,0) = 0 then 'Valid'  else BlockStatus.Name end) as BlockedStatus,
   Customer.BrokerAppName
  
  
  From dbo.Customer Customer With (Nolock)           
  Inner join [dbo].[SocialProfile] SP ON SP.CustomerId=Customer.CustomerId          
        
 left join [dbo].PaymentPlan SubS           
  ON SubS.PaymentPlanId=isnull(SP.PaymentPlanId,1)           
    --AND SubS.StatusId=25          
 left join [dbo].[SocialProfile_Instagram_TargetingInformation] TI           
  On TI.[SocialProfileId]=SP.[SocialProfileId]          
 Left join dbo.EnumerationValue EV           
  ON EV.EnumerationValueId=SP.StatusId --And EV.EnumerationId=4    
  left outer join dbo.EnumerationValue BlockStatus on Sp.BlockedStatus = BlockStatus.EnumerationValueId
 Where (          
   ((@riStatusId is null) or Customer.StatusId = @riStatusId)          
          
   AND           
     (((@riProductId is null) or @riProductId ='' ) or  SubS.[StripePlanId] = @riProductId)          
  AND ((@riSubscription is null) or SubS.StatusId= @riSubscription)      
  AND ((@profileType is null) or isnull(Customer.IsBroker,0)= @profileType)    
  AND ((@BlockId is null or @BlockId = 69) or isnull(SP.BlockedStatus,0)= @BlockId)    
          
  And (           
    (@rsSearchCrite is null or @rsSearchCrite = '')           
    or (SP.[SocialProfileName] like '%' +@rsSearchCrite +'%'           
    or Customer.UserName like '%' +@rsSearchCrite +'%'          
     or SubS.PlanName like '%' +@rsSearchCrite +'%'           
           
     or EV.Name like '%' +@rsSearchCrite +'%'           
     or Customer.FirstName like '%' +@rsSearchCrite +'%'          
     or Customer.SurName like '%' +@rsSearchCrite +'%'          
     or Customer.[EmailAddress] like '%' +@rsSearchCrite +'%'          
     or SP.[SocialUsername] like '%' +@rsSearchCrite +'%'           
               
      )          
   )          
 )          
       )          
            
Insert into @tbResult(          
RowNumber  ,            
InstaName  ,            
UserName   ,            
CustomerId ,            
Products   ,            
        
[Status]   ,          
        
SocialProfileName,          
SocialProfileId,          
CustomerEmail,  
FollowOn,  
   UnFollFollowersAfterMinDays,  
   AfterFollLikeuserPosts,  
   AfterFollViewUserStory,
   BlockedStatus,
   BrokerAppName
          
)          
SELECT Distinct          
 ROW_NUMBER() Over (            
           Order By UpdatedOn desc          
            ) As RowNumber,        
SocialAccountName,[Name],CustomerId,Products,[Status],SocialProfileName,          
SocialProfileId,EmailAddress,  
FollowOn,  
   UnFollFollowersAfterMinDays,  
   AfterFollLikeuserPosts,  
   AfterFollViewUserStory,
   BlockedStatus,
   BrokerAppName
 FROM CTE  where RankId=1          
          
 Select tb.UserName,            
  InstaName,          
  tb.CustomerId,          
        Products,          
     ProxyIPNumber,          
     isnull(c.IsBroker,0) IsBroker,          
[Status],          
  JVBoxStatus,          
  SocialProfileName,          
  SocialProfileId,          
  CustomerEmail,          
  FollowOn,  
   UnFollFollowersAfterMinDays,  
   AfterFollLikeuserPosts,  
   AfterFollViewUserStory,  
   BlockedStatus,
   tb.BrokerAppName,
     (Select Count(1) From @tbResult) TotalRecord          
 From @tbResult   tb       
 inner join Customer c on tb.CustomerId = c.CustomerId       
 Where RowNumber Between @iFirstRow And @iLastRow          
           
 Return @@Error           
End 